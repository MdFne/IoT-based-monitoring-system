 2025/08/27
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
<!-- 
 <template> ... </template>  是模板部分，用html书写，管理一个页面的大体排版，从标题到文字都由html制定，有大量<div></div>嵌套，注意对齐缩进
 <script> ... </script>      是脚本部分，用js书写，主要用于处理逻辑和数据，例如何时调用何种函数，更新某些变量等
 <style> ... </style>        是样式部分，用css书写，主要用于设置页面的视觉效果，如颜色字体布局等，可以理解为word里的字体格式

 App.vue文件负责整个网页的更新和框架渲染，它管理着各个组件的生命周期和状态，确保数据的流动和视图的更新; 同时维护sider（侧边栏），主内容区（main-content）和底部（footer）的布局和样式。
 App.vue的script部分主要负责记录并更新网页状态（首页/数据分析/设备管理/告警中心）；
 App.vue的style部分主要负责维护每个组件的样式，确保它们在不同状态下的视觉一致性；style里有些设置我也不知道有什么用，反正都是屎山代码了暂时别动就对了:)

 其他几个vue文件应该遵照大体相同的html+js+css样式书写，传统css样式是先定义class=“xxx”，再.xxx{...}设置参数，如果class比较简单也可以用内嵌式节省代码空间；
 index.html和main.js里应该暂时没有需要修改的地方，大部分组件都在App和components里完成；
 ！！！写DataAnalysis和DeviceManager的时候记得把负责渲染侧边栏的那段代码删掉，如果你写了的话（如果直接npm run dev出来的网页是带侧边那一栏的话就是写了），只要保留主要区域的代码就可以了，不然影响刷新
 例如：
    <template>
        <div class="sider-bar">     <-删掉这段
            ...                     
        </div>                      

        <div class="main-content">  <-主内容区，保留
            ...
        </div>

        <div class="footer">        <-删掉这段
            ...                     
        </div>                      
    </template>
    ...
    <style scoped>
    .sider-bar{                     <-可以不管，最好删掉
        ...
    }
    .main-content{                  <-主内容区，保留

    }
    .footer{                        <-可以不管，最好删掉
        ...
    }
    </style>
-->


————————————————————————————————————————————————————————————————————————————————————————————————————————————————————